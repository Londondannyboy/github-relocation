---
interface Props {
  title: string;
  subtitle?: string;
  videoUrl: string;
}

const { title, subtitle, videoUrl } = Astro.props;
---

<section class="video-reveal-hero relative h-screen overflow-hidden bg-black">
  <!-- Text Overlay -->
  <div class="absolute inset-0 z-20 flex items-center justify-center">
    <div class="text-container text-center px-8">
      <h1 class="hero-title text-6xl md:text-8xl lg:text-9xl font-bold text-white mix-blend-difference">
        <span class="title-word">{title.split(' ')[0]}</span>
        <span class="title-word">{title.split(' ').slice(1).join(' ')}</span>
      </h1>
      {subtitle && (
        <p class="subtitle text-xl md:text-2xl mt-6 text-white/80 max-w-2xl mx-auto opacity-0">
          {subtitle}
        </p>
      )}
    </div>
  </div>

  <!-- Video Background with Mask -->
  <div class="video-container absolute inset-0 z-10">
    <div class="video-mask absolute inset-0 z-30"></div>
    <video 
      class="w-full h-full object-cover scale-110"
      autoplay 
      muted 
      loop 
      playsinline
    >
      <source src="https://videos.pexels.com/video-files/3129957/3129957-uhd_2560_1440_25fps.mp4" type="video/mp4" />
      <source src={videoUrl} type="video/mp4" />
    </video>
  </div>

  <!-- Scroll Indicator -->
  <div class="absolute bottom-8 left-1/2 -translate-x-1/2 z-30">
    <div class="scroll-down">
      <div class="mouse">
        <div class="wheel"></div>
      </div>
      <div class="arrows">
        <span class="arrow"></span>
        <span class="arrow"></span>
      </div>
    </div>
  </div>
</section>

<style>
  .video-reveal-hero {
    position: relative;
  }

  .hero-title {
    line-height: 0.8;
    letter-spacing: -0.05em;
  }

  .title-word {
    display: block;
    overflow: hidden;
  }

  .video-mask {
    background: radial-gradient(
      ellipse at center,
      transparent 0%,
      transparent 40%,
      rgba(0, 0, 0, 0.9) 100%
    );
    pointer-events: none;
  }

  /* Scroll Indicator */
  .scroll-down {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
  }

  .mouse {
    width: 25px;
    height: 40px;
    border: 2px solid white;
    border-radius: 15px;
    position: relative;
  }

  .wheel {
    width: 3px;
    height: 8px;
    background: white;
    border-radius: 2px;
    position: absolute;
    top: 8px;
    left: 50%;
    transform: translateX(-50%);
    animation: wheel 2s infinite;
  }

  @keyframes wheel {
    0% {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }
    100% {
      opacity: 0;
      transform: translateX(-50%) translateY(15px);
    }
  }

  .arrows {
    display: flex;
    flex-direction: column;
    gap: -5px;
  }

  .arrow {
    display: block;
    width: 10px;
    height: 10px;
    border-right: 2px solid white;
    border-bottom: 2px solid white;
    transform: rotate(45deg);
    animation: arrow 2s infinite;
  }

  .arrow:nth-child(2) {
    animation-delay: 0.2s;
  }

  @keyframes arrow {
    0% {
      opacity: 0;
      transform: rotate(45deg) translate(-5px, -5px);
    }
    50% {
      opacity: 1;
    }
    100% {
      opacity: 0;
      transform: rotate(45deg) translate(5px, 5px);
    }
  }
</style>

<script>
  import gsap from 'gsap';
  import SplitType from 'split-type';

  document.addEventListener('DOMContentLoaded', () => {
    const heroSections = document.querySelectorAll('.video-reveal-hero');

    heroSections.forEach(section => {
      const video = section.querySelector('video');
      const videoContainer = section.querySelector('.video-container');
      const mask = section.querySelector('.video-mask');
      const titleWords = section.querySelectorAll('.title-word');
      const subtitle = section.querySelector('.subtitle');

      // Split text animation
      titleWords.forEach((word, index) => {
        const split = new SplitType(word as HTMLElement, {
          types: 'chars',
          tagName: 'span'
        });

        gsap.from(split.chars, {
          y: 100,
          opacity: 0,
          rotation: 10,
          stagger: 0.02,
          duration: 1.2,
          delay: index * 0.1,
          ease: 'power4.out'
        });
      });

      // Subtitle animation
      if (subtitle) {
        gsap.to(subtitle, {
          opacity: 1,
          y: 0,
          duration: 1,
          delay: 0.8,
          ease: 'power3.out'
        });
      }

      // Video reveal on scroll
      const timeline = gsap.timeline({
        scrollTrigger: {
          trigger: section,
          start: "top top",
          end: "bottom top",
          scrub: 1,
        }
      });

      timeline
        .to(mask, {
          background: 'radial-gradient(ellipse at center, transparent 100%, transparent 100%, rgba(0, 0, 0, 0) 100%)',
          duration: 1
        })
        .to(video, {
          scale: 1,
          duration: 1
        }, 0)
        .to('.hero-title', {
          scale: 1.2,
          y: -50,
          opacity: 0,
          duration: 1
        }, 0);

      // Mouse move parallax
      section.addEventListener('mousemove', (e) => {
        const rect = section.getBoundingClientRect();
        const mouseX = (e.clientX - rect.left) / rect.width - 0.5;
        const mouseY = (e.clientY - rect.top) / rect.height - 0.5;

        gsap.to(video, {
          x: mouseX * 30,
          y: mouseY * 30,
          duration: 1,
          ease: 'power2.out'
        });
      });
    });
  });
</script>